@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

<PageTitle>Last.fm Music Library</PageTitle>

<div class="container mt-4">
    <div class="jumbotron bg-light p-4 rounded">
        <h1 class="display-5">Last.fm Music Library</h1>
    </div>

    <div class="card">
        <div class="card-body">
            @if (libraryData == null)
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (libraryData.Count == 0)
            {
                <div class="alert alert-info" role="alert">
                    <h4 class="alert-heading">No Data Yet!</h4>
                    <p>Your library is empty. Start by importing some artists from Last.fm.</p>
                    <hr>
                    <a href="/import" class="btn btn-primary">Import Artists</a>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th @onclick="@(() => SortBy("artist"))" class="sortable">
                                    Artist
                                    @if (sortField == "artist")
                                    {
                                        <i class="bi bi-@(sortAscending ? "sort-down" : "sort-up")"></i>
                                    }
                                </th>
                                <th>Tags</th>
                                <th @onclick="@(() => SortBy("album"))" class="sortable">
                                    Album
                                    @if (sortField == "album")
                                    {
                                        <i class="bi bi-@(sortAscending ? "sort-down" : "sort-up")"></i>
                                    }
                                </th>
                                <th>Album Image</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in libraryData)
                            {
                                <tr>
                                    <td>
                                        <strong>@item.ArtistName</strong>
                                        @if (!string.IsNullOrEmpty(item.ArtistUrl))
                                        {
                                            <a href="@item.ArtistUrl" target="_blank" class="ms-2">
                                                <i class="bi bi-box-arrow-up-right small"></i>
                                            </a>
                                        }
                                    </td>
                                    <td>
                                        @foreach (var tag in item.Tags)
                                        {
                                            <span class="badge bg-secondary me-1">@tag</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.AlbumTitle))
                                        {
                                            <span>@item.AlbumTitle</span>
                                            @if (!string.IsNullOrEmpty(item.AlbumUrl))
                                            {
                                                <a href="@item.AlbumUrl" target="_blank" class="ms-2">
                                                    <i class="bi bi-play-circle small"></i>
                                                </a>
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-muted">No albums</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.AlbumImageUrl))
                                        {
                                            <img src="@item.AlbumImageUrl" alt="@item.AlbumTitle"
                                                 class="album-thumbnail" />
                                        }
                                        else if (!string.IsNullOrEmpty(item.AlbumTitle))
                                        {
                                            <div class="album-thumbnail-placeholder">
                                                <i class="bi bi-disc"></i>
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mt-3 text-muted">
                    Showing @libraryData.Count records
                </div>
            }
        </div>
    </div>
</div>

<style>
    .album-thumbnail {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 4px;
    }

    .album-thumbnail-placeholder {
        width: 50px;
        height: 50px;
        background-color: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        color: #6c757d;
    }

    .sortable {
        cursor: pointer;
        user-select: none;
    }

        .sortable:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    .jumbotron {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
</style>

@code {
    private List<LibraryItem> libraryData = null!;
    private string sortField = "artist";
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadLibraryData();
    }

    private async Task LoadLibraryData()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            var baseUri = Navigation.BaseUri;

            // Use the new complete endpoint that returns all data in one call
            var artists = await httpClient.GetFromJsonAsync<List<ArtistDetailDto>>(
                $"{baseUri}api/artists/complete");

            if (artists != null)
            {
                libraryData = new List<LibraryItem>();

                foreach (var artist in artists)
                {
                    if (artist.Albums != null && artist.Albums.Count > 0)
                    {
                        // Create a row for each album
                        foreach (var album in artist.Albums)
                        {
                            libraryData.Add(new LibraryItem
                            {
                                ArtistId = artist.Id,
                                ArtistName = artist.Name,
                                ArtistUrl = artist.Url,
                                Tags = artist.Tags,
                                AlbumTitle = album.Title,
                                AlbumUrl = album.Url,
                                AlbumImageUrl = album.ImageUrl
                            });
                        }
                    }
                    else
                    {
                        // Create a row even if no albums
                        libraryData.Add(new LibraryItem
                        {
                            ArtistId = artist.Id,
                            ArtistName = artist.Name,
                            ArtistUrl = artist.Url,
                            Tags = artist.Tags,
                            AlbumTitle = null,
                            AlbumUrl = null,
                            AlbumImageUrl = null
                        });
                    }
                }

                SortData();
            }
            else
            {
                libraryData = new List<LibraryItem>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading library data: {ex.Message}");
            libraryData = new List<LibraryItem>();
        }
    }

    private void SortData()
    {
        libraryData = sortField switch
        {
            "artist" => sortAscending
                ? libraryData.OrderBy(x => x.ArtistName).ToList()
                : libraryData.OrderByDescending(x => x.ArtistName).ToList(),
            "album" => sortAscending
                ? libraryData.OrderBy(x => x.AlbumTitle ?? "zzz").ToList()
                : libraryData.OrderByDescending(x => x.AlbumTitle ?? "").ToList(),
            _ => libraryData
        };
    }

    private void SortBy(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
        SortData();
    }

    private class LibraryItem
    {
        public int ArtistId { get; set; }
        public string ArtistName { get; set; } = "";
        public string? ArtistUrl { get; set; }
        public List<string> Tags { get; set; } = new();
        public string? AlbumTitle { get; set; }
        public string? AlbumUrl { get; set; }
        public string? AlbumImageUrl { get; set; }
    }

    public class ArtistDetailDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string? Url { get; set; }
        public List<string> Tags { get; set; } = new();
        public List<AlbumDto>? Albums { get; set; }
    }

    public class AlbumDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string? Url { get; set; }
        public string? ImageUrl { get; set; }
    }
}